#define MIN_HEIGHT 3
#define MIN_WIDTH 3


#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <stdio.h>
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat init;
Mat temp;

Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
double optimum[3];

void processVideo(char* videoFilename);

void matching(int,int,int,int);

int main(int argc, char* argv[])
{
	optimum[0]=-1;
	optimum[1]=0;
	optimum[2]=0;

	if(argc != 3) 
	{
		cerr <<"Incorret input list" << endl;
		cerr <<"exiting..." << endl;
		return EXIT_FAILURE;
	}

	//create GUI windows
	namedWindow("Frame");
	//namedWindow("FG Mask MOG 2");
	//namedWindow("Output",CV_WINDOW_AUTOSIZE);
	//namedWindow("Match",CV_WINDOW_AUTOSIZE);
	namedWindow("Template");

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
	temp=imread(argv[2],1);
	imshow("Template",temp);

	processVideo(argv[1]);
	
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

void processVideo(char* videoFilename)
{    
    Mat thres; 
	
	VideoCapture capture(videoFilename);
	
	if(!capture.isOpened())
	{
		//error in opening the video input
		cerr << "Unable to open video file: " << videoFilename << endl;
		exit(EXIT_FAILURE);
	}
	
	//read input data. ESC or 'q' for quitting
	while( (char)keyboard != 'q' && (char)keyboard != 27 )
	{

		//read the current frame
		if(!capture.read(frame)) 
		{
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
	
		//update the background model
		//cvtColor( init, init, CV_BGR2GRAY );
		//equalizeHist(init,frame);	
		pMOG2->apply(frame, fgMaskMOG2);
			
		//Mat dstf;
		//frame.copyTo(dstf);
		vector<vector<Point>>contours;// array to store the contour points
		vector<Vec4i>heirarchy;// array to store the topology of contours' next,previous,child,parent(indices)
		findContours(fgMaskMOG2,contours,heirarchy,CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );//function to find the contours
		vector<vector<Point>>approxpoly(contours.size());// array to store the approximation of contours for making a polygon
		vector<Rect>boundrect(contours.size());// array of rectangles corresponding to each contour
		
		
		double best1=-1,best2,best3;	
		for(int l=0;l<contours.size();l++)
		{
			approxPolyDP( Mat(contours[l]), approxpoly[l], 3, true );// calculates the approx polygon
			boundrect[l] = boundingRect(Mat(approxpoly[l]) ); // bounds the contour with rectangle

			if(boundrect[l].width>MIN_WIDTH&&boundrect[l].height>MIN_HEIGHT)
			{
				matching(boundrect[l].x,boundrect[l].y,boundrect[l].width,boundrect[l].height);
				if(best1==-1||(optimum[0]!=-1&&optimum[0]<best1))
				{
					best1=optimum[0];
					best2=optimum[1];
					best3=optimum[2];
				}
			}				
		}

		rectangle( frame,Point(best2,best3), Point( best2 + temp.cols , best3 + temp.rows ), Scalar::all(0), 2, 8, 0 );
	
		//imshow("FG Mask MOG 2", fgMaskMOG2);
		//imshow("Output",dstf);
		//threshold( fgMaskMOG2, thres, 200, 255,0 );
		//imshow("threshold",thres);	
		imshow("Frame",frame);
		keyboard = waitKey( 30 );
	}
	//delete capture object
	capture.release();
}



void matching(int a,int b,int c,int d)
{
	if(c>temp.size().width&&d>temp.size().height)
	{
		Rect roi(a,b,c,d);
		Mat M(frame,roi);
		Mat res;
	
		//Mat hsv;
		//cvtColor(M,hsv,CV_BGR2HSV);
		int method=CV_TM_SQDIFF;
		int cols=M.cols-temp.cols+1;
		int rows=M.rows-temp.rows+1;
		
		res.create(rows,cols,CV_32FC1);

		matchTemplate(M,temp,res,method);
		
		double minimum,maximum;
		Point maxl,minl;
		minMaxLoc( res, &minimum, &maximum, &minl, &maxl, Mat() );

		optimum[0]=minimum;
		optimum[1]=minl.x+a;
		optimum[2]=minl.y+b;
	}
	else
	{
		optimum[0]=-1;
	}
}
