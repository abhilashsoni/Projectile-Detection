//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <stdio.h>
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
    // image after thresholding
Mat init;
Mat temp1;
Mat temp;
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void matching(int,int,int,int);
Mat copy2;
void help()
{
	cout
	<< "--------------------------------------------------------------------------" <<
	endl
	<< "This program shows how to use background subtraction methods provided by " <<
	endl
	<< " OpenCV. You can process both videos (-vid) and images (-img)." << endl
	<< endl
	<< "Usage:" << endl
	<< "./bs {-vid <video filename>|-img <image filename>}" << endl
	<< "for example: ./bs -vid video.avi" << endl
	<< "or: ./bs -img /data/images/1.png" << endl<< "--------------------------------------------------------------------------" <<
	endl
	<< endl;
}
int main(int argc, char* argv[])
{
	//print help information
	help();
	temp=imread("ball2.png",1);
	//cvtColor(temp1,temp,CV_BGR2HSV);
	//check for the input parameter correctness

	if(argc != 3) 
	{
		cerr <<"Incorret input list" << endl;
		cerr <<"exiting..." << endl;
		return EXIT_FAILURE;
	}

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG 2");
	namedWindow("Output",CV_WINDOW_AUTOSIZE);
	namedWindow("Match",CV_WINDOW_AUTOSIZE);
	namedWindow("Template");
	//namedWindow("threshold");
	imshow("Template",temp);
	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

	if(strcmp(argv[1], "-vid") == 0)
	 {
		//input data coming from a video
		processVideo(argv[2]);
	}

	else if(strcmp(argv[1], "-img") == 0) 
	{
		//input data coming from a sequence of images
		processImages(argv[2]);
	}
	else 
	{
		//error in reading input parameters
		cerr <<"Please, check the input parameters." << endl;
		cerr <<"Exiting..." << endl;
		return EXIT_FAILURE;
	}
	
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

void processVideo(char* videoFilename) 
{       Mat thres; 
	//create the capture object
	VideoCapture capture(videoFilename);
	
	if(!capture.isOpened())
	{
	//error in opening the video input
	cerr << "Unable to open video file: " << videoFilename << endl;
	exit(EXIT_FAILURE);
	}
	
	//read input data. ESC or 'q' for quitting
	while( (char)keyboard != 'q' && (char)keyboard != 27 )
	{
	//read the current frame
	if(!capture.read(frame)) 
		{
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
	
	//update the background model
	//cvtColor( init, init, CV_BGR2GRAY );
	//equalizeHist(init,frame);	
	pMOG2->apply(frame, fgMaskMOG2);
	
	//get the frame number and write it on the current frame
	stringstream ss;
	rectangle(frame, cv::Point(10, 2), cv::Point(100,20),cv::Scalar(255,255,255), -1);
	ss << capture.get(CAP_PROP_POS_FRAMES);
	string frameNumberString = ss.str();
	putText(frame, frameNumberString.c_str(), cv::Point(15, 15),FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

	//show the current frame and the fg masks
	imshow("Frame", frame);
Mat dstf;
frame.copyTo(dstf);
frame.copyTo(copy2);
vector<vector<Point>>contours;// array to store the contour points
			vector<Vec4i>heirarchy;// array to store the topology of contours' next,previous,child,parent(indices)
			findContours(fgMaskMOG2,contours,heirarchy,CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );//function to find the contours
			vector<vector<Point>>approxpoly(contours.size());// array to store the approximation of contours for making a polygon
			vector<Rect>boundrect(contours.size());// array of rectangles corresponding to each contour
			
			for(int l=0;l<contours.size();l++)
			{
//cout<<l<<endl;
				approxPolyDP( Mat(contours[l]), approxpoly[l], 3, true );// calculates the approx polygon
				boundrect[l] = boundingRect(Mat(approxpoly[l]) ); // bounds the contour with rectangle
//cout<<l<<endl;
				if(boundrect[l].width>temp.cols/12&&boundrect[l].height>temp.rows/12)
				{
					rectangle( dstf, Point( boundrect[l].x,boundrect[l].y ), Point( boundrect[l].x + boundrect[l].width , boundrect[l].y + boundrect[l].height ), Scalar::all(0), 2, 8, 0 );//creates actual rectangle in source image
//cout<<l<<endl;
					matching(boundrect[l].x,boundrect[l].y,boundrect[l].width,boundrect[l].height);
//cout<<l<<endl;
				}
				
			}
	
	imshow("FG Mask MOG 2", fgMaskMOG2);
	imshow("Output",dstf);
	imshow("Match",copy2);
	//threshold( fgMaskMOG2, thres, 200, 255,0 );
	//imshow("threshold",thres);	
	//get the input from the keyboard
	keyboard = waitKey( 30 );
	}
	//delete capture object
	capture.release();
}
void processImages(char* fistFrameFilename) 
{
	//read the first file of the sequence
	frame = imread(fistFrameFilename);
	if(frame.empty())
		{
		//error in opening the first image
		cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
		exit(EXIT_FAILURE);
		}
	
	//current image filename
	string fn(fistFrameFilename);
	
	//read input data. ESC or 'q' for quitting
	while( (char)keyboard != 'q' && (char)keyboard != 27 )
	{
	
	//update the background model
	pMOG2->apply(frame, fgMaskMOG2);
	
	//get the frame number and write it on the current frame
	size_t index = fn.find_last_of("/");
	if(index == string::npos) 
	{
	index = fn.find_last_of("\\");
	}
	size_t index2 = fn.find_last_of(".");
	string prefix = fn.substr(0,index+1);
	string suffix = fn.substr(index2);
	string frameNumberString = fn.substr(index+1, index2-index-1);
	istringstream iss(frameNumberString);
	int frameNumber = 0;
	iss >> frameNumber;
	rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
	cv::Scalar(255,255,255), -1);
	putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
	FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
	
	//show the current frame and the fg masks
	imshow("Frame", frame);
	imshow("FG Mask MOG 2", fgMaskMOG2);
	
	//get the input from the keyboard
	keyboard = waitKey( 30 );

	//search for the next image in the sequence
	ostringstream oss;
	oss << (frameNumber + 1);
	string nextFrameNumberString = oss.str();
	string nextFrameFilename = prefix + nextFrameNumberString + suffix;
	
	//read the next frame
	frame = imread(nextFrameFilename);
	if(frame.empty())
	{	
		//error in opening the next image in the sequence
		cerr << "Unable to open image frame: " << nextFrameFilename << endl;
		exit(EXIT_FAILURE);
	}
	//update the path of the current frame
	fn.assign(nextFrameFilename);
	}
}
void matching(int a,int b,int c,int d)
{
if(c>temp.size().width&&d>temp.size().height)
{
Rect roi(a,b,c,d);
Mat M(frame,roi);
Mat res;
	//cout<<"@"<<endl;
	
	Mat hsv;
	//cvtColor(M,hsv,CV_BGR2HSV);
	int method=CV_TM_SQDIFF;
	int cols=M.cols-temp.cols+1;
	int rows=M.rows-temp.rows+1;
//cout<<"c\n";
	res.create(rows,cols,CV_32FC1);
//cout<<"b\n";
	matchTemplate(M,temp,res,method);
	//normalize( res, res, 0, 1, NORM_MINMAX, -1, Mat() );

	double min,max;
	Point maxl,minl,matchl;
	minMaxLoc( res, &min, &max, &minl, &maxl, Mat() );
//cout<<"#"<<endl;
 	if( method  == CV_TM_SQDIFF || method == CV_TM_SQDIFF_NORMED )
    	{
		matchl = minl; 
	       // cout<<min<<endl;
	}
        else
        {
		 matchl=maxl;
               	cout<<max;
 	}
Point matchl1;
matchl1.x=matchl.x+a;
matchl1.y=b+matchl.y;
//cout<<"*"<<endl;
cout<<min<<endl;
  /// Show me what you got
		if(min<120000)	
	  	{
		rectangle( copy2, matchl1, Point( matchl1.x + temp.cols , matchl1.y + temp.rows ), Scalar::all(0), 2, 8, 0 );
		cout<<"##############"<<min<<endl;
//cout<<"A\n";
	  //rectangle( result, matchl, Point( matchl.x + temp.cols , matchl.y + temp.rows ), Scalar::all(0), 2, 8, 0 );
 		} 
 	 //imshow( "result", result );
	
}
}
